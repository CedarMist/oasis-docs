"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[3193],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},l=Object.keys(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)n=l[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=p(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||l;return n?o.createElement(h,i(i({ref:t},c),{},{components:n})):o.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=m;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[u]="string"==typeof e?e:a,i[1]=r;for(var p=2;p<l;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5280:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>l,metadata:()=>r,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const l={},i="Ballot Contract",r={unversionedId:"dapp/opl/enclave",id:"dapp/opl/enclave",title:"Ballot Contract",description:"Next, we will write a smart contract that holds private data. This smart",source:"@site/docs/dapp/opl/enclave.md",sourceDirName:"dapp/opl",slug:"/dapp/opl/enclave",permalink:"/dapp/opl/enclave",draft:!1,editUrl:"https://github.com/oasisprotocol/docs/edit/main/docs/dapp/opl/enclave.md",tags:[],version:"current",lastUpdatedAt:1687256264,formattedLastUpdatedAt:"Jun 20, 2023",frontMatter:{},sidebar:"developers",previous:{title:"DAO Contract",permalink:"/dapp/opl/host"},next:{title:"Build",permalink:"/dapp/opl/build"}},s={},p=[{value:"Autoswitch",id:"autoswitch",level:4},{value:"Event",id:"event",level:4},{value:"Private",id:"private",level:4}],c={toc:p},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"ballot-contract"},"Ballot Contract"),(0,a.kt)("p",null,"Next, we will write a smart contract that holds private data. This smart\ncontract will run inside a trusted execution environment (TEE) on the Oasis\nSapphire ParaTime, which why we refer to these as an ",(0,a.kt)("em",{parentName:"p"},"enclave")," smart contract."),(0,a.kt)("p",null,"Create a new Solidity contract named ",(0,a.kt)("inlineCode",{parentName:"p"},"BallotBoxV1.sol"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Enclave, Result, autoswitch} from "@oasisprotocol/sapphire-contracts/contracts/OPL.sol";\n\nerror NotActive();\n\ntype ProposalId is bytes32;\n\nstruct ProposalParams {\n    string ipfsHash;\n    uint16 numChoices;\n    bool publishVotes;\n}\n\ncontract BallotBoxV1 is Enclave {\n    error NotPublishingVotes();\n    error AlreadyVoted();\n    error UnknownChoice();\n\n    struct Ballot {\n        bool active;\n        ProposalParams params;\n        /// voter -> choice id\n        mapping(address => Choice) votes;\n        /// choice id -> vote\n        uint256[32] voteCounts;\n    }\n\n    struct Choice {\n        bool exists;\n        uint8 choice;\n    }\n\n    event BallotClosed(ProposalId indexed id, uint256 topChoice);\n\n    mapping(ProposalId => Ballot) private _ballots;\n\n    constructor(address dao) Enclave(dao, autoswitch("bsc")) {\n        registerEndpoint("createBallot", _oplCreateBallot);\n    }\n\n    function castVote(\n        ProposalId proposalId,\n        uint256 choiceIdBig\n    ) external payable {\n        Ballot storage ballot = _ballots[proposalId];\n        if (!ballot.active) revert NotActive();\n        uint8 choiceId = uint8(choiceIdBig & 0xff);\n        if (choiceId >= ballot.params.numChoices) revert UnknownChoice();\n        Choice memory existingVote = ballot.votes[_msgSender()];\n        // 1 click 1 vote\n        for (uint256 i; i < ballot.params.numChoices; ++i) {\n            // read-modify-write all counts to make it harder to determine which one is chosen.\n            ballot.voteCounts[i] ^= 1 << 255; // flip the top bit to constify gas usage a bit\n            // Arithmetic is not guaranteed to be constant time, so this might still leak the choice to a highly motivated observer.\n            ballot.voteCounts[i] += i == choiceId ? 1 : 0;\n            ballot.voteCounts[i] -= existingVote.exists && existingVote.choice == i\n                ? 1\n                : 0;\n        }\n        ballot.votes[_msgSender()].exists = true;\n        ballot.votes[_msgSender()].choice = choiceId;\n    }\n\n    function closeBallot(ProposalId proposalId) external payable {\n        Ballot storage ballot = _ballots[proposalId];\n        if (!ballot.active) revert NotActive();\n        _closeBallot(proposalId, ballot);\n    }\n\n    function getVoteOf(ProposalId proposalId, address voter) external view returns (Choice memory) {\n        Ballot storage ballot = _ballots[proposalId];\n        if (voter == msg.sender) return ballot.votes[msg.sender];\n        if (!ballot.params.publishVotes) revert NotPublishingVotes();\n        return ballot.votes[voter];\n    }\n\n    function ballotIsActive(ProposalId id) external view returns (bool) {\n        return _ballots[id].active;\n    }\n\n    function _oplCreateBallot(bytes calldata args) internal returns (Result) {\n        (ProposalId id, ProposalParams memory params) = abi.decode(\n            args,\n            (ProposalId, ProposalParams)\n        );\n        Ballot storage ballot = _ballots[id];\n        ballot.params = params;\n        ballot.active = true;\n        for (uint256 i; i < params.numChoices; ++i) ballot.voteCounts[i] = 1 << 255; // gas usage side-channel resistance.\n        return Result.Success;\n    }\n\n    function _closeBallot(ProposalId _proposalId, Ballot storage _ballot) internal {\n        uint256 topChoice;\n        uint256 topChoiceCount;\n        for (uint8 i; i < _ballot.params.numChoices; ++i) {\n            uint256 choiceVoteCount = _ballot.voteCounts[i] & (type(uint256).max >> 1);\n            if (choiceVoteCount > topChoiceCount) {\n                topChoice = i;\n                topChoiceCount = choiceVoteCount;\n            }\n        }\n        postMessage("ballotClosed", abi.encode(_proposalId, topChoice));\n        emit BallotClosed(_proposalId, topChoice);\n        delete _ballots[_proposalId];\n    }\n}\n')),(0,a.kt)("h4",{id:"autoswitch"},"Autoswitch"),(0,a.kt)("p",null,"In this tutorial, the ",(0,a.kt)("em",{parentName:"p"},"enclave")," smart contract will talk to the ",(0,a.kt)("em",{parentName:"p"},"host")," smart\ncontract deployed on the Binance Smart Chain (",(0,a.kt)("inlineCode",{parentName:"p"},"bsc"),")."),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Autoswitch will automatically pick the Testnet host network if the enclave network is also Testnet.")),(0,a.kt)("p",null,"Autoswitch supports the following networks:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ethereum")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"goerli")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"optimism")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bsc")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bsc-testnet")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"polygon")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fantom")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"fantom-testnet")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"moonriver")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arbitrum-one")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arbitrum-nova")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sapphire")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sapphire-testnet")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"polygon-mumbai")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"avalanche")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"avalanche-fuji")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"arbitrum-testnet"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'    constructor(address dao) Enclave(dao, autoswitch("bsc")) {\n        registerEndpoint("createBallot", _oplCreateBallot);\n    }\n')),(0,a.kt)("h4",{id:"event"},"Event"),(0,a.kt)("p",null,"Closing a ballot has an effect on the host chain network (",(0,a.kt)("inlineCode",{parentName:"p"},"postMessage()"),"):"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},'    function _closeBallot(ProposalId _proposalId, Ballot storage _ballot) internal {\n        uint256 topChoice;\n        uint256 topChoiceCount;\n        for (uint8 i; i < _ballot.params.numChoices; ++i) {\n            uint256 choiceVoteCount = _ballot.voteCounts[i] & (type(uint256).max >> 1);\n            if (choiceVoteCount > topChoiceCount) {\n                topChoice = i;\n                topChoiceCount = choiceVoteCount;\n            }\n        }\n        postMessage("ballotClosed", abi.encode(_proposalId, topChoice));\n        emit BallotClosed(_proposalId, topChoice);\n        delete _ballots[_proposalId];\n    }\n')),(0,a.kt)("h4",{id:"private"},"Private"),(0,a.kt)("p",null,"The private variable ",(0,a.kt)("inlineCode",{parentName:"p"},"_ballots")," is encrypted on Sapphire."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-solidity"},"    mapping(ProposalId => Ballot) private _ballots;\n")))}d.isMDXComponent=!0}}]);