"use strict";(self.webpackChunkdocs_oasis_dev=self.webpackChunkdocs_oasis_dev||[]).push([[5921],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),i=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=i(e.components);return a.createElement(p.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=i(n),u=o,m=c["".concat(p,".").concat(u)]||c[u]||h[u]||r;return n?a.createElement(m,l(l({ref:t},d),{},{components:n})):a.createElement(m,l({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,l=new Array(r);l[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:o,l[1]=s;for(var i=2;i<r;i++)l[i]=n[i];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2465:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>i});var a=n(7462),o=(n(7294),n(3905));const r={},l="Build",s={unversionedId:"dapp/opl/build",id:"dapp/opl/build",title:"Build",description:"Now that we have written our two smart contracts, let's compile and deploy them!",source:"@site/docs/dapp/opl/build.md",sourceDirName:"dapp/opl",slug:"/dapp/opl/build",permalink:"/dapp/opl/build",draft:!1,editUrl:"https://github.com/oasisprotocol/docs/edit/main/docs/dapp/opl/build.md",tags:[],version:"current",lastUpdatedAt:1687256264,formattedLastUpdatedAt:"Jun 20, 2023",frontMatter:{},sidebar:"developers",previous:{title:"Ballot Contract",permalink:"/dapp/opl/enclave"},next:{title:"Frontend Application",permalink:"/dapp/opl/frontend"}},p={},i=[{value:"Compiling",id:"compiling",level:3},{value:"Deploying",id:"deploying",level:3},{value:"Localhost",id:"localhost",level:4},{value:"Testnet",id:"testnet",level:4}],d={toc:i},c="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"build"},"Build"),(0,o.kt)("p",null,"Now that we have written our two smart contracts, let's compile and deploy them!"),(0,o.kt)("h3",{id:"compiling"},"Compiling"),(0,o.kt)("p",null,"Compile both the host and enclave smart contracts by invoking:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npx hardhat compile\n")),(0,o.kt)("h3",{id:"deploying"},"Deploying"),(0,o.kt)("p",null,"We can make deployments easier by using ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/wighawag/hardhat-deploy"},"Hardhat deploy"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npm install -D hardhat-deploy\n")),(0,o.kt)("p",null,"Add the following configuration changes to your ",(0,o.kt)("inlineCode",{parentName:"p"},"hardhat.config.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},"diff --git a/backend/hardhat.config.ts b/backend/hardhat.config.ts\nindex cd8df42..0875e8e 100644\n--- a/backend/hardhat.config.ts\n+++ b/backend/hardhat.config.ts\n@@ -1,8 +1,70 @@\n-import { HardhatUserConfig } from \"hardhat/config\";\n+import '@oasisprotocol/sapphire-hardhat';\n import \"@nomicfoundation/hardhat-toolbox\";\n+import { HardhatUserConfig, task } from 'hardhat/config';\n+\n+const accounts = process.env.PRIVATE_KEY ? [process.env.PRIVATE_KEY] : [];\n+\n+task('deploy-ballot-box')\n+  .addParam('hostNetwork')\n+  .setAction(async (args, hre) => {\n+    await hre.run('compile');\n+    const ethers = hre.ethers;\n+    const BallotBoxV1 = await ethers.getContractFactory('BallotBoxV1');\n+    const signer = ethers.provider.getSigner();\n+    const signerAddr = await signer.getAddress();\n+\n+    // Start by predicting the address of the DAO contract.\n+    const hostConfig = hre.config.networks[args.hostNetwork];\n+    if (!('url' in hostConfig)) throw new Error(`${args.hostNetwork} not configured`);\n+    const provider = new ethers.providers.JsonRpcProvider(hostConfig.url);\n+    let nonce = await provider.getTransactionCount(signerAddr);\n+    if (args.hostNetwork === 'local') nonce++;\n+    const daoAddr = ethers.utils.getContractAddress({ from: signerAddr, nonce });\n+\n+    const ballotBox = await BallotBoxV1.deploy(daoAddr);\n+    await ballotBox.deployed();\n+    console.log('expected DAO', daoAddr);\n+    console.log('BallotBox', ballotBox.address);\n+    return ballotBox.address;\n+  });\n+\n+task('deploy-dao')\n+  .addParam('ballotBoxAddr')\n+  .setAction(async (args, hre) => {\n+    await hre.run('compile');\n+    const DAOV1 = await hre.ethers.getContractFactory('DAOV1');\n+    const dao = await DAOV1.deploy(args.ballotBoxAddr);\n+    await dao.deployed();\n+    console.log('DAO', dao.address);\n+    return dao;\n+  });\n+\n+task('deploy-local').setAction(async (_args, hre) => {\n+    await hre.run('compile');\n+    const ballotBox = await hre.run('deploy-ballot-box', { hostNetwork: 'local' });\n+    await hre.run('deploy-dao', { ballotBoxAddr: ballotBox });\n+  });\n \n const config: HardhatUserConfig = {\n   solidity: \"0.8.18\",\n+  networks: {\n+    hardhat: {\n+      chainId: 1337, // @see https://hardhat.org/metamask-issue.html\n+    },\n+    local: {\n+      url: 'http://127.0.0.1:8545',\n+    },\n+    bsc_testnet: {\n+      url: 'https://data-seed-prebsc-1-s1.binance.org:8545',\n+      chainId: 97,\n+      accounts,\n+    },\n+    sapphire_testnet: {\n+      url: 'https://testnet.sapphire.oasis.dev',\n+      chainId: 0x5aff,\n+      accounts,\n+    },\n+  }\n };\n \n export default config;\n")),(0,o.kt)("h4",{id:"localhost"},"Localhost"),(0,o.kt)("p",null,"We can start local Hardhat node again:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npx hardhat node\n")),(0,o.kt)("p",null,"Our deploy should succeed locally."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npx hardhat deploy-local --network localhost\nNothing to compile\nNo need to generate any newer typings.\nNothing to compile\nNo need to generate any newer typings.\nexpected DAO 0xa513E6E4b8f2a923D98304ec87F64353C4D5C853\nBallotBox 0x0165878A594ca255338adfa4d48449f69242Eb8F\nNothing to compile\nNo need to generate any newer typings.\nDAO 0xa513E6E4b8f2a923D98304ec87F64353C4D5C853\n")),(0,o.kt)("p",null,"We will use these addresses in our frontend application."),(0,o.kt)("h4",{id:"testnet"},"Testnet"),(0,o.kt)("p",null,"We can likewise deploy to OPL ",(0,o.kt)("a",{parentName:"p",href:"../../dapp/sapphire/guide#testnet-and-mainnet"},"Testnet")," with Sapphire."),(0,o.kt)("p",null,"In this case, we should prepare a wallet with Testnet tokens on both BNB Smart\nChain ",(0,o.kt)("a",{parentName:"p",href:"https://testnet.bnbchain.org/faucet-smart"},"Faucet")," and Sapphire ",(0,o.kt)("a",{parentName:"p",href:"https://faucet.testnet.oasis.dev"},"faucet"),"."),(0,o.kt)("p",null,"We will use a common private key for both the host and enclave smart contracts."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"export PRIVATE_KEY=\n")),(0,o.kt)("p",null,"Deploy the enclave smart contract using Testnet parameters."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npx hardhat deploy-ballot-box --network sapphire_testnet --host-network bsc_testnet\nNothing to compile\nNo need to generate any newer typings.\nexpected DAO 0xFBcb580DD6D64fbF7caF57FB0439502412324179\nBallotBox 0xFb40591a8df155da291A4B52E4Df9901a95b7C06\n")),(0,o.kt)("p",null,"Next, use the obtained ",(0,o.kt)("inlineCode",{parentName:"p"},"BallotBox")," address below to deploy the host smart\ncontract:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"npx hardhat deploy-dao --network bsc_testnet --ballot-box-addr {BALLOT_BOX_ADDR}\nNothing to compile\nNo need to generate any newer typings.\nDAO 0xFBcb580DD6D64fbF7caF57FB0439502412324179\n")),(0,o.kt)("admonition",{title:"Example",type:"info"},(0,o.kt)("p",{parentName:"admonition"},"You can try out and download a complete backend example with both host and\nenclave smart contracts from the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/oasisprotocol/playground/tree/main/opl-secret-ballot/backend"},"Oasis Playground repository"),".")))}h.isMDXComponent=!0}}]);